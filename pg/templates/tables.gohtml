// Code generated by tablegen. DO NOT EDIT.
package tables

import (
    "time"
    "encoding/json"

    "cloud.google.com/go/civil"
    "github.com/shopspring/decimal"
)

// ---------------------------------------------------------------------
//                                 TABLE
// ---------------------------------------------------------------------

func (t AllTables) {{ .CamelCasedTableName }} () {{ .TableType }} { return {{ .TableType }}(t) }

type {{ .TableType }} struct { alias string }

func (t {{ .TableType }}) TableAlias() string { return t.alias }
func (t {{ .TableType }}) name() string { return "{{ .TableName }}" }
func (t {{ .TableType }}) TableName() string { return tableName(t.name(), t.alias) }
{{- if eq (len .PrimaryKeys) 1 }}
func (t {{ .TableType }}) PrimaryKeyColumn() string {
    {{- range $index, $col := .PrimaryKeys -}}
        return t.Columns().{{ snakeToCamelCase . }}()
    {{- end -}}
}
{{ end }}

func (t {{ .TableType }} ) AllColumnNames() []string {
    c := t.Columns()
    return []string{
    {{ range $index, $col := .Cols }} c.{{ snakeToCamelCase .Name }}(),
    {{end}}
    }
}

func (t {{ .TableType }}) Columns() {{ .TableColsType }} { return {{ .TableColsType }}{tableAlias: t.alias} }

// ---------------------------------------------------------------------
//                                COLUMNS
// ---------------------------------------------------------------------

type {{ .TableColsType }} struct { tableAlias string }
{{ range $index, $col := .Cols }} func (c {{ $.TableColsType }}) {{ snakeToCamelCase .Name }}() string { return colName(c.tableAlias, "{{ .Name }}") }
{{end}}

{{ if .PrimaryKeys }}
// ---------------------------------------------------------------------
//                              TABLE KEY
// ---------------------------------------------------------------------

type {{ .CamelCasedTableName }}Key struct {
    {{ range $index, $col := .Cols -}}
        {{- if .IsPrimaryKey -}}
            {{ snakeToCamelCase .Name }} {{ insertColumnType . }}
        {{ end -}}
    {{- end -}}
}

func (v {{ .CamelCasedTableName }}Key) GetTable() {{ .TableType }} { return Get().{{ .CamelCasedTableName }}() }
func (v {{ .CamelCasedTableName }}Key) GetKeyColumns() []string {
    return []string{
{{- range $index, $col := .PrimaryKeys -}}
        "{{ . }}",
{{- end -}}
    }
}
func (v {{ .CamelCasedTableName }}Key) GetValue(column string) any {
    switch column {
{{- range $index, $col := .Cols -}}
    {{- if .IsPrimaryKey }}
    case "{{ .Name }}":
        return v.{{ snakeToCamelCase .Name }}
    {{ end -}}
{{- end -}}
    default:
        return nil
    }
}
{{ end }}

// ---------------------------------------------------------------------
//                                SELECT
// ---------------------------------------------------------------------

type {{ .CamelCasedTableName }}Select struct {
    {{ if .PrimaryKeys }}
    {{ .CamelCasedTableName }}Key
    {{- end }}
    {{ range $index, $col := .Cols }}
        {{- if not .IsPrimaryKey -}}
            {{ snakeToCamelCase .Name }} {{ selectColumnType . }}
        {{ end -}}
    {{- end -}}
}

func (v *{{ .CamelCasedTableName }}Select) GetScanValue(column string) any {
    switch column {
    {{ range $index, $col := .Cols }} case "{{ .Name }}":
        return &v.{{ snakeToCamelCase .Name }}
    {{end}} default:
        return nil
    }
}

// ---------------------------------------------------------------------
//                                INSERT
// ---------------------------------------------------------------------

type {{ .CamelCasedTableName }}Insert struct {
    {{ if .PrimaryKeys }}
        {{ .CamelCasedTableName }}Key
    {{- end }}
    {{ range $index, $col := .Cols }}
        {{- if not .IsPrimaryKey -}}
            {{ snakeToCamelCase .Name }} {{ insertColumnType . }}
        {{ end -}}
    {{- end -}}
}

func (v {{ .CamelCasedTableName }}Insert) GetInsertColumns() []string {
    cols := make([]string, 0, {{ len .Cols }})
    cols = append(
        cols,
    {{- range $index, $col := .Cols -}}
    {{- if and (not .Nullable) (not .Default) }}
        "{{ .Name }}",
    {{- end -}}
    {{- end }}
    )

    {{ range $index, $col := .Cols -}}
    {{- if .IsPrimaryKey -}} {{- continue -}} {{- end -}}
    {{ if or .Nullable .Default }}
    if v.{{ snakeToCamelCase .Name }} != nil {
        cols = append(cols, "{{ .Name }}")
    }
    {{- end -}}
    {{- end }}

    return cols
}

func (v {{ .CamelCasedTableName }}Insert) GetValue(column string) any {
    switch column {
    {{- range $index, $col := .Cols }}
    case "{{ .Name }}":
        {{- if or (eq .Type "jsonb") (eq .Type "json") }}
        return jsonEncoder{v.{{ snakeToCamelCase .Name }} }
        {{- else }}
        return v.{{ snakeToCamelCase .Name }}
        {{- end -}}
    {{- end }}
    default:
        return nil
    }
}

// ---------------------------------------------------------------------
//                                UPDATE
// ---------------------------------------------------------------------

type {{ .CamelCasedTableName }}Update struct {
{{ range $index, $col := .Cols }}
    {{- if not .IsPrimaryKey -}}
        {{ snakeToCamelCase .Name }} {{ updateColumnType . }}
    {{ end -}}
{{- end -}}
}

func (v {{ .CamelCasedTableName }}Update) GetUpdateColumns() []string {
    cols := make([]string, 0, {{ len .Cols }})
    {{ range $index, $col := .Cols }}
        {{ if .IsPrimaryKey -}}
            {{ continue }}
        {{- end -}}
    if v.{{ snakeToCamelCase .Name }} != nil {
        cols = append(cols, "{{ .Name }}")
    }
    {{- end }}

    return cols
}

func (v {{ .CamelCasedTableName }}Update) GetValue(column string) any {
    switch column {
    {{- range $index, $col := .Cols -}}
        {{- if .IsPrimaryKey -}}
            {{ continue }}
        {{- end }}
    case "{{ .Name }}":
        {{ if or .Nullable .Default -}}
        if v.{{ snakeToCamelCase .Name }} == ForceDefault[{{ columnType . }}]() {
            return nil
        }
        {{ end -}}
        {{- if or (eq .Type "jsonb") (eq .Type "json") -}}
        return jsonEncoder{v.{{ snakeToCamelCase .Name }} }
        {{- else -}}
        return v.{{ snakeToCamelCase .Name }}
        {{- end -}}
    {{- end }}
    default:
        return nil
    }
}

func (v {{ .CamelCasedTableName }}Update) GetTable() {{ .TableType }} { return Get().{{ .CamelCasedTableName }}() }
